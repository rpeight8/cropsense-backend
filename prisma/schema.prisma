// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique
  name             String      @db.VarChar(255)
  password         String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  createdFields    Field[]     @relation("createdBy")
  updatedFields    Field[]     @relation("updatedBy")
  createdCrops     Crop[]      @relation("createdBy")
  updatedCrops     Crop[]      @relation("updatedBy")
  createdSeason    Season[]    @relation("createdBy")
  createdFieldCrop FieldCrop[] @relation("createdBy")
  updatedFieldCrop FieldCrop[] @relation("updatedBy")
}

model Season {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  FieldCrop   FieldCrop[]
  createdById String?
  createdBy   User?       @relation("createdBy", fields: [createdById], references: [id])
  Crop        Crop?       @relation(fields: [cropId], references: [id])
  cropId      String?
}

enum GEOMETRY_TYPE {
  Polygon
  MultyPolygon
}

model Field {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(255)
  geometryType GEOMETRY_TYPE @default(Polygon)
  coordinates  Json[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  createdById  String
  createdBy    User?         @relation("createdBy", fields: [createdById], references: [id])
  updatedById  String?
  updatedBy    User?         @relation("updatedBy", fields: [updatedById], references: [id])
  NDVI         NDVI[]
  FieldCrop    FieldCrop[]
}

model Crop {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(255)
  color       String      @db.VarChar(255)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  createdById String?
  createdBy   User?       @relation("createdBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?       @relation("updatedBy", fields: [updatedById], references: [id])
  Season      Season[]
  FieldCrop   FieldCrop[]
}

model FieldCrop {
  id          String   @id @default(uuid())
  fieldId     String
  field       Field    @relation(fields: [fieldId], references: [id])
  cropId      String
  crop        Crop     @relation(fields: [cropId], references: [id])
  seasonId    String
  season      Season   @relation(fields: [seasonId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("createdBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?    @relation("updatedBy", fields: [updatedById], references: [id])
}

model NDVI {
  id        String   @id @default(uuid())
  date      DateTime
  fieldId   String
  field     Field    @relation(fields: [fieldId], references: [id])
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
